apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "starter-kit.fullname" . }}
  annotations:
  {{- if and .Values.vcsInfo.repoUrl .Values.vcsInfo.branch }}
    app.openshift.io/vcs-ref: {{ .Values.vcsInfo.branch }}
    app.openshift.io/vcs-uri: {{ trimSuffix ".git" .Values.vcsInfo.repoUrl }}
  {{- end }}
  {{- if .Values.connectsTo }}
    app.openshift.io/connects-to: {{ printf "[{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"name\":%s}]" (toJson .Values.connectsTo) | squote }}
  {{- end }}
  labels:
    app.kubernetes.io/name: {{ include "starter-kit.name" . }}
    helm.sh/chart: {{ include "starter-kit.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app: {{ .Release.Name }}
    {{- if .Values.partOf }}
    app.kubernetes.io/part-of: {{ .Values.partOf }}
    {{- end}}
    {{- if .Values.runtime }}
    app.openshift.io/runtime: {{ .Values.runtime }}
    {{- end}}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "starter-kit.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "starter-kit.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ .Values.name }}
      {{- if .Values.image.secretName }}
      imagePullSecrets:
        - name: {{ .Values.image.secretName }}
      {{- end }}
      volumes:
      {{- if and (eq .Values.ccdt.enabled true) (.Values.ccdt.volumeName) }}
        - name: {{ .Values.ccdt.volumeName }}
          configMap:
            name: {{ .Values.ccdt.configMapName }}
      {{- end }}
      {{- if eq .Values.security true }}
        - name: {{ .Values.certs.volumeName }}
          secret:
            secretName: {{ .Values.certs.certSecretName }}
            defaultMode: 384
            optional: false
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          {{- if and (eq .Values.ccdt.enabled true) (.Values.ccdt.volumeName) }}
            - name: {{ .Values.ccdt.volumeName }}
              mountPath: {{ .Values.ccdt.volumeMountPath }}
          {{- end }}
          {{- if eq .Values.security true }}
            - name: {{ .Values.certs.volumeName }}
              mountPath: {{ .Values.certs.volumeMountPath }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.image.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: {{ .Values.image.port }}
              scheme: HTTP
            timeoutSeconds: 10
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: {{ .Values.image.port }}
              scheme: HTTP
            timeoutSeconds: 10
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          env:
            - name: INGRESS_HOST
              value: ""
            - name: PROTOCOLS
              value: ""
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | quote }}
            {{- if eq .Values.ccdt.enabled true }}
            - name: SPRING_PROFILES_ACTIVE
              value: ccdt
            - name: CCDT_URL
              value: {{ .Values.ccdt.CCDT_URL }}
            {{- end }}
            {{- if eq .Values.security true }}
            - name: SPRING_PROFILES_ACTIVE
              value: securemq
            {{- end }}
            {{- if and (eq .Values.ccdt.enabled true) (eq .Values.security true) }}
            - name: SPRING_PROFILES_ACTIVE
              value: ccdt,securemq
            {{- end }}
            {{- if eq .Values.security true }}
            - name: CLIENT_SSL_TRUST_STORE
              value: {{ .Values.certs.volumeMountPath }}/{{ .Values.certs.trustStoreFileName }}
            - name: CLIENT_SSL_KEY_STORE
              value: {{ .Values.certs.volumeMountPath }}/{{ .Values.certs.keyStoreFileName }}
            {{- end }}
            - name: QM
              valueFrom:
                configMapKeyRef:
                  key: QM
                  name: {{ include "mq-spring-app.fullname" . }}
            - name: CHANNEL
              valueFrom:
                configMapKeyRef:
                  key: CHANNEL
                  name: {{ include "mq-spring-app.fullname" . }}
            - name: CONNECTION_NAME
              valueFrom:
                configMapKeyRef:
                  key: CONNECTION_NAME
                  name: {{ include "mq-spring-app.fullname" . }}
            {{- if eq .Values.security true }}
            - name: USER
              valueFrom:
                secretKeyRef:
                  key: USER
                  name: {{ include "mq-spring-app.fullname" . }}
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  key: PASSWORD
                  name: {{ include "mq-spring-app.fullname" . }}
            {{- end }}
            - name: QUEUE_NAME
              valueFrom:
                configMapKeyRef:
                  key: QUEUE_NAME
                  name: {{ include "mq-spring-app.fullname" . }}
            - name: APP_NAME
              valueFrom:
                configMapKeyRef:
                  key: APP_NAME
                  name: {{ include "mq-spring-app.fullname" . }}
            - name: OPENTRACING_JAEGER_ENABLED
              value: {{ .Values.jaeger.enabled | quote }}
          envFrom:
            - configMapRef:
                name: {{ default "jaeger-config" .Values.jaeger.configName }}
                optional: true
            - secretRef:
                name: {{ default "jaeger-access" .Values.jaeger.secretName }}
                optional: true
            {{- if eq .Values.security true }}
            - secretRef:
                name: {{ .Values.certs.certPasswordSecretName }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
